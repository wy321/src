// ROS
#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <pcl_ros/transforms.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <sensor_msgs/PointCloud2.h>

// PCL includes
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/range_image/range_image_planar.h>
#include <pcl/filters/passthrough.h>
#include <pcl/common/common_headers.h>
#include <pcl-1.8/pcl/visualization/pcl_visualizer.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/PCLPointCloud2.h>
#include <pcl/conversions.h>

//OpenCV2
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <boost/thread/mutex.hpp>

static const std::string RGB_WINDOW   = "RGB window";
static const std::string DEPTH_WINDOW = "DEPTH_window"; 

/**
 * TODO Possible problems with sync between image, how to deal with it?. One option is save the image in a queue with hashmap timestamp.
 * 
 */
class CylinderDetector
{
private:   
    boost::mutex m;
    ros::NodeHandle nh_;
    image_transport::ImageTransport it_;
    image_transport::Subscriber image_sub_;
    image_transport::Subscriber depth_sub_;
    image_transport::Publisher image_pub_;
    sensor_msgs::ImageConstPtr depthImage;
    sensor_msgs::PointCloud2ConstPtr pointCloud;
    sensor_msgs::ImageConstPtr rgbImage;
    std::vector<cv::Rect> regions;
    
public:
    CylinderDetector(): it_(nh_)
    {
        image_sub_ = it_.subscribe("/camera/rgb/image_rect_color", 1, &CylinderDetector::rgbMsg, this);
        depth_sub_ = it_.subscribe("/camera/depth/image_raw", 1, &CylinderDetector::depthMsg, this);
//         depth_sub_ = it_.subscribe("/camera/depth/points", 1, &CylinderDetector::pointMsg, this);
        cv::namedWindow(RGB_WINDOW);
        cv::namedWindow(DEPTH_WINDOW);
    }
    
    ~CylinderDetector()
    {
        cv::destroyWindow(RGB_WINDOW);
        cv::destroyWindow(DEPTH_WINDOW);
    }
    
    void rgbMsg(const sensor_msgs::ImageConstPtr& msg)
    {
        m.lock();
        rgbImage = msg;
        m.unlock();
        regions = processRGB();
        std::cout << regions.size() << std::endl;
    }
    
    void depthMsg(const sensor_msgs::ImageConstPtr& msg)
    {
        m.lock();
        depthImage = msg;
        m.unlock();
        processDepth();
    }
      
    void pointMsg(const sensor_msgs::PointCloud2ConstPtr& msg)
    {
        m.lock();
        pointCloud = msg;
        m.unlock();
        processPoints();
    }
      
    std::vector<cv::Rect> processRGB()
    {
        cv_bridge::CvImagePtr cv_ptr;
        try
        {
            cv_ptr = cv_bridge::toCvCopy(rgbImage, sensor_msgs::image_encodings::TYPE_8UC3);
        }
        catch (cv_bridge::Exception& e)
        {
            ROS_ERROR("cv_bridge exception: %s", e.what());
            exit;
        }
        
        cv::Mat imgHSV;
        cvtColor(cv_ptr->image, imgHSV, cv::COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV

        cv::Mat imgThresholded;
        inRange(imgHSV, cv::Scalar(35, 60, 45), cv::Scalar(92,255,255), imgThresholded); //Green color
            
        //morphological opening (remove small objects from the foreground)
        erode(imgThresholded, imgThresholded, getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5)) );
        dilate( imgThresholded, imgThresholded, getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5)) ); 

        //morphological closing (fill small holes in the foreground)
        dilate( imgThresholded, imgThresholded, getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5)) ); 
        erode(imgThresholded, imgThresholded, getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5)) );

        /// Find contours
        cv::Mat canny_output;

        cv::Canny(imgThresholded, canny_output, 100, 100*2, 3 );
        cv::imshow(RGB_WINDOW, cv_ptr->image);
        std::vector<std::vector<cv::Point> > contours;
        std::vector<cv::Vec4i> hierarchy;
        cv::findContours( canny_output, contours, hierarchy, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );
        
        /// Approximate contours to polygons + get bounding rects.
        std::vector<std::vector<cv::Point> > contours_poly( contours.size() );
        std::vector<cv::Rect> boundRect( contours.size() );
 
        for( int i = 0; i < contours.size(); i++ ){ 
            approxPolyDP( cv::Mat(contours[i]), contours_poly[i], 3, true );
            boundRect[i] = cv::boundingRect( cv::Mat(contours_poly[i]) );
            
        }
        
        // Draw polygonal contour + bonding rects + circles
        for( int i = 0; i< contours.size(); i++){
            cv::Scalar color = cv::Scalar(255,255,255);
            cv::imshow("Region proposal", cv_ptr->image(boundRect[i]));
            cv::waitKey(3);
        }
        
        return boundRect;
    }
    
    void processDepth()
    {
        cv_bridge::CvImagePtr cv_ptr;
        try
        {
            cv_ptr = cv_bridge::toCvCopy(depthImage, sensor_msgs::image_encodings::TYPE_32FC1);
        }
        catch (cv_bridge::Exception& e)
        {
            ROS_ERROR("cv_bridge exception: %s", e.what());
            return;
        }
        if(regions.size()>0){
            cv::Mat region = cv_ptr->image(regions[0]);
            cv::Mat projection = cv::Mat::zeros(400,400,CV_8UC1);
            std::vector<cv::Point> points;
            for(int jj=0; jj<region.cols; jj++){
                cv::Point pt;
                pt.x = jj;
                pt.y = region.at<float>(region.rows/2,jj);
                points.push_back(pt);
            }
            cv::Point2f center;
            float radius = 0;
            cv::minEnclosingCircle(cv::Mat(points),center,radius);
            std::cout << center << " " << radius << " ";
            
            for(int jj=0; jj<region.cols; jj++){
                cv::Point pt;
                pt.x = jj;
                pt.y = region.at<float>(region.rows/4,jj);
                points.push_back(pt);
            }
            radius = 0;
            cv::minEnclosingCircle(cv::Mat(points),center,radius);
            std::cout << center << " " << radius << " ";
            
            
            for(int jj=0; jj<region.cols; jj++){
                cv::Point pt;
                pt.x = jj;
                pt.y = region.at<float>(region.rows/4*3,jj);
                points.push_back(pt);
            }
            radius = 0;
            cv::minEnclosingCircle(cv::Mat(points),center,radius);
            std::cout << center << " " << radius << std::endl;
        }
    }
    
    void processPoints()
    {
        pcl::PCLPointCloud2 pcl_pc2;
//         pcl::conversions::toPCL(pointCloud,pcl_pc2);
    }
};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_converter");
  CylinderDetector cylinder;
  ros::spin();
  return 0;
}
